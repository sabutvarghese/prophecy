from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from enrich_accounts.config.ConfigStore import *
from enrich_accounts.udfs.UDFs import *

def by_id_left_outer(spark: SparkSession, in0: DataFrame, in1: DataFrame, ) -> DataFrame:
    return in0\
        .alias("in0")\
        .join(in1.alias("in1"), (col("in0.id") == col("in1.AccountId")), "left_outer")\
        .select(col("in0.Id").alias("Id"), col("in1.NumOpportunities").alias("NumOpportunities"), col("in1.Amount").alias("Amount"), col("in1.ExpectedRevenue").alias("ExpectedRevenue"), col("in1.LastCloseQtr").alias("LastCloseQtr"), col("in0.IsDeleted").alias("IsDeleted"), col("in0.MasterRecordId").alias("MasterRecordId"), col("in0.Name").alias("Name"), col("in0.Type").alias("Type"), col("in0.ParentId").alias("ParentId"), col("in0.BillingStreet").alias("BillingStreet"), col("in0.BillingCity").alias("BillingCity"), col("in0.BillingState").alias("BillingState"), col("in0.BillingPostalCode").alias("BillingPostalCode"), col("in0.BillingCountry").alias("BillingCountry"), col("in0.BillingLatitude").alias("BillingLatitude"), col("in0.BillingLongitude").alias("BillingLongitude"), col("in0.BillingGeocodeAccuracy").alias("BillingGeocodeAccuracy"), col("in0.ShippingStreet").alias("ShippingStreet"), col("in0.ShippingCity").alias("ShippingCity"), col("in0.ShippingState").alias("ShippingState"), col("in0.ShippingPostalCode").alias("ShippingPostalCode"), col("in0.ShippingCountry").alias("ShippingCountry"), col("in0.ShippingLatitude").alias("ShippingLatitude"), col("in0.ShippingLongitude").alias("ShippingLongitude"), col("in0.ShippingGeocodeAccuracy").alias("ShippingGeocodeAccuracy"), col("in0.Phone").alias("Phone"), col("in0.Fax").alias("Fax"), col("in0.AccountNumber").alias("AccountNumber"), col("in0.Website").alias("Website"), col("in0.Sic").alias("Sic"), col("in0.Industry").alias("Industry"), col("in0.AnnualRevenue").alias("AnnualRevenue"), col("in0.NumberOfEmployees").alias("NumberOfEmployees"), col("in0.Ownership").alias("Ownership"), col("in0.TickerSymbol").alias("TickerSymbol"), col("in0.Description").alias("Description"), col("in0.Rating").alias("Rating"), col("in0.Site").alias("Site"), col("in0.OwnerId").alias("OwnerId"), col("in0.CreatedDate").alias("CreatedDate"), col("in0.CreatedById").alias("CreatedById"), col("in0.LastModifiedDate").alias("LastModifiedDate"), col("in0.LastModifiedById").alias("LastModifiedById"), col("in0.SystemModstamp").alias("SystemModstamp"), col("in0.LastActivityDate").alias("LastActivityDate"), col("in0.Jigsaw").alias("Jigsaw"), col("in0.JigsawCompanyId").alias("JigsawCompanyId"), col("in0.CleanStatus").alias("CleanStatus"), col("in0.AccountSource").alias("AccountSource"), col("in0.DunsNumber").alias("DunsNumber"), col("in0.Tradestyle").alias("Tradestyle"), col("in0.NaicsCode").alias("NaicsCode"), col("in0.NaicsDesc").alias("NaicsDesc"), col("in0.YearStarted").alias("YearStarted"), col("in0.SicDesc").alias("SicDesc"), col("in0.DandbCompanyId").alias("DandbCompanyId"), col("in0.OperatingHoursId").alias("OperatingHoursId"), col("in0.CustomerPriority__c").alias("CustomerPriority__c"), col("in0.SLA__c").alias("SLA__c"), col("in0.Active__c").alias("Active__c"), col("in0.NumberofLocations__c").alias("NumberofLocations__c"), col("in0.UpsellOpportunity__c").alias("UpsellOpportunity__c"), col("in0.SLASerialNumber__c").alias("SLASerialNumber__c"), col("in0.SLAExpirationDate__c").alias("SLAExpirationDate__c"))
